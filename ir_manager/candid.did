type HttpOutcallError = variant {
  IcError : record { code : RejectionCode; message : text };
  InvalidHttpJsonRpcResponse : record {
    status : nat16;
    body : text;
    parsingError : opt text;
  };
};
type JsonRpcError = record { code : int64; message : text };
type ManagerError = variant {
  Custom : text;
  Locked;
  Unauthorized;
  DecodingError : text;
  RpcResponseError : RpcError;
  CyclesBalanceAboveRechargingThreshold;
  NonExistentValue;
};
type ProviderError = variant {
  TooFewCycles : record { expected : nat; received : nat };
  MissingRequiredProvider;
  ProviderNotFound;
  NoPermission;
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok : text; Err : ManagerError };
type Result_1 = variant { Ok; Err : ManagerError };
type Result_2 = variant { Ok : SwapResponse; Err : ManagerError };
type RpcError = variant {
  JsonRpcError : JsonRpcError;
  ProviderError : ProviderError;
  ValidationError : ValidationError;
  HttpOutcallError : HttpOutcallError;
};
type StrategyInput = record {
  key : nat32;
  manager : text;
  rpc_principal : principal;
  hint_helper : text;
  collateral_index : nat;
  multi_trove_getter : text;
  upfront_fee_period : nat;
  rpc_url : text;
  target_min : float64;
  collateral_registry : text;
};
type StrategyQueryData = record {
  locked : bool;
  batch_manager : text;
  latest_rate : text;
  eoa_pk : opt text;
  target_min : text;
  last_update : nat64;
  trove_manager : text;
};
type SwapResponse = record { returning_ether : nat; accepted_cycles : nat };
type ValidationError = variant {
  CredentialPathNotAllowed;
  HostNotAllowed : text;
  CredentialHeaderNotAllowed;
  UrlParseError : text;
  Custom : text;
  InvalidHex : text;
};
service : {
  get_strategies : () -> (vec StrategyQueryData) query;
  get_strategy_address : (nat32) -> (opt text) query;
  mint_strategy : (StrategyInput) -> (Result);
  set_batch_manager : (nat32, text) -> (Result_1);
  start_timers : () -> (Result_1);
  swap_cketh : () -> (Result_2);
}
